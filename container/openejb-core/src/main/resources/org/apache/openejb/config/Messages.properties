#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
cmd.cipher.description = Uses a password cipher implementation to encrypt/decrypt a value.

#options.addOption(option("h", "help", "cmd.cipher.opt.help"));
cmd.cipher.opt.help = Lists these options and exits.

#options.addOption(option("i", "cipher", "cmd.cipher.opt.impl"));
cmd.cipher.opt.impl = Specifies the password cipher implementation to use (default is Static3DES).

#options.addOption(option("d", "decrypt", "cmd.cipher.opt.decrypt"));
cmd.cipher.opt.decrypt = Switches command line tool to decrypt.

#options.addOption(option("e", "encrypt", "cmd.cipher.opt.encrypt"));
cmd.cipher.opt.encrypt = Switches command line tool to encrypt (default).

# Undeploy
#formatter.printHelp("undeploy [options] <moduleId> [<moduleId>...]", "\n"+ Undeploy.i18n("cmd.deploy.description"), options, "\n");
cmd.undeploy.description= Connects to the server and Undeploys the module(s)

# options.addOption(Undeploy.option("h", "help", "cmd.undeploy.opt.help"));
cmd.undeploy.opt.help = Lists these options and exits.

#System.out.println(messages.format("cmd.undeploy.successful", moduleId));
cmd.undeploy.successful = Successfully undeployed module with moduleId \"{0}\" .

# System.out.println(messages.format("cmd.undeploy.failed", moduleId));
cmd.undeploy.failed = Failed to undeploy module with moduleId \"{0}\" .

#System.out.println(messages.format("cmd.undeploy.noSuchModule", moduleId));
cmd.undeploy.noSuchModule = Module with moduleId \"{0}\" does not exist.

##System.out.println(messages.format("cmd.undeploy.nothingToDelete", moduleId));
cmd.undeploy.nothingToDelete = Nothing to delete.

# throw new DeploymentTerminatedException(messages.format("cmd.undeploy.cantDelete", file.getAbsolutePath()));
cmd.undeploy.cantDelete = Application was undeployed from the runtime server but could not be deleted from the file system and will have to be deleted by hand: {0} 

#Deploy
cmd.deploy.description = Connects to the server and deploys the application.  Note that full remote deployment is not yet supported, deployment can only be done on the same machine as the server.  Track OPENEJB-609 for development of full remote deployment feature.\n\nOptions:

# options.addOption(option("v", "version", "cmd.deploy.opt.version"));
cmd.deploy.opt.version = Prints the OpenEJB version and exits.

# options.addOption(option("h", "help", "cmd.deploy.opt.help"));
cmd.deploy.opt.help = Lists these options and exit.

# options.addOption(option("o", "offline", "cmd.deploy.opt.offline"));
cmd.deploy.opt.offline = Deploys the app to an offline server by copying the archive into the server's apps/ directory.  The app will be deployed when the server is started.  The default is online.

# options.addOption(option("s", "server-url", "url", "cmd.deploy.opt.server"));
cmd.deploy.opt.server = Sets the url of the OpenEJB server to which the app will be deployed.  The value should be the same as the JNDI Provider URL used to lookup EJBs.  The default is 'ejbd://localhost:4201'.

# options.addOption(option("d", "debug", "cmd.deploy.opt.debug"));
cmd.deploy.opt.debug = Increases the level of detail on validation errors and deployment summary.

# options.addOption(option("q", "quiet", "cmd.deploy.opt.quiet"));
cmd.deploy.opt.quiet = Decreases the level of detail on validation and skips the deployment summary.

# options.addOption(option(null, "dir", "cmd.deploy.opt.dir"));
cmd.deploy.opt.dir = Sets the destination directory where the app will be deployed.  The default is {openejb.base}/apps/ directory.  Note when changing this setting make sure the directory is listed in the openejb.xml via a <Deployments dir=""/> tag or the app will not be picked up again on restart.

# options.addOption(option("u", "undeploy", "cmd.deploy.opt.undeploy"));
cmd.deploy.opt.undeploy = Undeploys the app if deployed and/or deletes the file if it already exists in the server's apps/ directory.

# System.out.println(messages.format("cmd.deploy.serverOffline"));
cmd.deploy.serverOffline =  The server is offline or not contactable at the configured address.  Either start the server or try deployment again in --offline mode.

# System.out.println(messages.format("cmd.deploy.offline", path, destFile.getAbsolutePath()));
cmd.deploy.offline =  The application \"{0}\" has been copied to the directory \"{1}\" and will be loaded when the server starts.

# System.out.println(messages.format("cmd.deploy.successful", path, appInfo.jarPath));
cmd.deploy.successful =  Application deployed successfully at \"{0}\"

# System.out.println(messages.format("cmd.deploy.validationFailed", path));
cmd.deploy.validationFailed = Application did not pass validation: {0}

# System.out.println(messages.format("cmd.deploy.failed", path));
cmd.deploy.failed = Application failed to deploy \"{0}\".  Check server logs for more details.

# throw new DeploymentTerminatedException(messages.format("cmd.deploy.fileNotFound", file.getAbsolutePath()));
cmd.deploy.fileNotFound = Archive does not exist: {0}

# throw new DeploymentTerminatedException(messages.format("cmd.deploy.destExists", file.getAbsolutePath(), destFile.getAbsolutePath()));
cmd.deploy.destExists = Application already deployed at \"{1}\"

# throw new DeploymentTerminatedException(messages.format("cmd.deploy.cantCopy", file.getAbsolutePath(), destFile.getAbsolutePath()));
cmd.deploy.cantCopy = Unable to copy application to \"{1}\".  Check that the directory is writable and that there is enough disk space.

# System.out.println(messages.format("cmd.deploy.cantDelete.deploy", destFile.getAbsolutePath()));
cmd.deploy.cantDelete.deploy = Unable to delete failed deployment file "{0}"

# System.out.println(messages.format("cmd.deploy.cantDelete.undeploy", destFile.getAbsolutePath()));
cmd.deploy.cantDelete.undeploy = Unable to delete existing deployment file "{0}"

# EnvEntriesPropertiesDeployer
# debug("envprops.override", componentName, entry.getName(), entry.getEnvEntryValue(), newEntry.getEnvEntryValue());
envprops.override = Overriding env-entry(name \"{1}\", old-value=\"{2}\", new-value=\"{3}\"), Bean=\"{0}\"

# debug("envprops.add", componentName, newEntry.getName(), newEntry.getEnvEntryValue());
envprops.add = Adding env-entry(name=\"{1}\", value=\"{2}\", type='java.lang.String'), Bean=\"{0}\"

# error("envprops.notLoaded", e, module.getModuleId(), propsUrl.toExternalForm());
envprops.notLoaded = Could not load META-INF/env-entries.properties for module \"{0}\".

config.invalid.referenceName.suffix=Invalid referenceName suffix. name: {0}.

#fatal("config.noBeanFoundEjbLink", ejb.getEjbRefName(), referringComponent, ejb.getEjbLink());
config.noBeanFoundEjbLink=Unresolved ejb reference \"{0}\" with ejb-link \"{2}\" in bean \"{1}\".  Will attempt resolution again at runtime.

#fatal("config.noBeanFound", ejb.getEjbRefName(), referringComponent);
config.noBeanFound=Unresolved ejb reference \"{0}\" in bean \"{1}\".  Will attempt resolution again at runtime.

# info("configureService.configuring", service.getId(), provider.getService(), provider.getId());
configureService.configuring=Configuring Service(id={0}, type={1}, provider-id={2})

# fatal("configureService.failed", service.getId(), e)
configureService.failed=Failed Configuring Service(id={0})

# "configureService.wrongProviderType", service.getId(), providerType));
configureService.wrongProviderType=ServiceProvider of "{0}" is not of type "{1}"


# info("config.configApp", appModule.getJarLocation());
config.configApp=Configuring enterprise application: {0}

# warning("configureApplication.loadFailed", jarFile.getAbsolutePath(), e.getMessage());
configureApplication.loadFailed=Jar not loaded. {0}.  {1}

# used in org.apache.openejb.config.sys.SaxOpenejb.DeploymentsElement.startElement if <Deployment> section is ambiguous
configureApplication.ambiguousDeploymentJarFile = Both 'jar' and 'file' attributes are set in <Deployment>, only file will be used ({0})

# format("configureService.noDefaultService", infoType.getName())
configureService.noDefaultService = No Default Service for {0}

# format("configureService.noProviderForService", service.getClass().getName(), service.getId(), service.getType(), service.getProvider(), sb.toString());
configureService.noProviderForService = Cannot determine a provider for {0}(id={1}, type={2}, provider={3}).\n\nPossible valid configurations might be: {4}

# ConfigurationFactory
# throw new OpenEJBException(messages.format("unrecognizedContainerType", declaration.getType()));
unrecognizedContainerType = Unrecognized container type {0}

# throw new OpenEJBException(messages.format("cannotInstantiateClass", infoType.getName()), e);
configureService.cannotInstantiateClass = Cannot instantiate class {0}

# throw new OpenEJBException(messages.format("configureService.cannotInstantiateClass", serviceClass.getName()), e);
configureService.cannotInstantiateServiceClass = Cannot instantiate service class {0}

# warning no modules found to deploy
config.noModulesFoundToDeploy = No module found for deployment. Maybe the descriptors are placed in incorrect location.