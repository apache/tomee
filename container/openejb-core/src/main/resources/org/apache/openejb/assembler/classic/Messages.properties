#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# Assembler.PersistenceClassLoaderHandlerImpl
# addTransformer(ClassLoader, ClassFileTransformer)
# error("assembler.noAgent");
assembler.noAgent = JAVA AGENT NOT INSTALLED. The JPA Persistence Provider requested installation of a ClassFileTransformer which requires a JavaAgent.  See http://tomee.apache.org/javaagent.html

#throw new OpenEJBException(messages.format("assembler.cannotBindServiceWithId", serviceInfo.service, serviceInfo.id), e);
assembler.cannotBindServiceWithId=Cannot bind {0} with id {1} 

#throw new OpenEJBException(messages.format("assembler.resourceAdapterNotResourceAdapter", id, resourceAdapter.getClass()));
assembler.resourceAdapterNotResourceAdapter="Resource adapter defined with id '{0}' is not an instance of ResourceAdapter, but is an instance of {1}

#throw new OpenEJBException(messages.format("assembler.requiresGeronimoTX"));
assembler.requiresGeronimoTX=The use of a resource adapter requires a Apache Geronimo transaction manager

#throw new RuntimeException(messages.format("assembler.invalidConnectionManager", serviceInfo.id));
assembler.invalidConnectionManager=Invalid connection manager specified for connector identity = {0}

# PersistenceBuilder.java
# logger.info("assembler.buildingPersistenceUnit", unitInfo.getPersistenceUnitName(), unitInfo.getPersistenceProviderClassName(), unitInfo.getPersistenceUnitRootUrl(), unitInfo.getTransactionType());
assembler.buildingPersistenceUnit = PersistenceUnit(name={0}, provider={1}) - provider time {2}ms

# Assembler
# buildContainerSystem(OpenEjbConfiguration)
# error("appNotDeployed", appInfo.jarPath, e);
appNotDeployed = Application could not be deployed:  {0}

# createApplication(AppInfo, ClassLoader)
# info("createApplication.start", appInfo.jarPath);
createApplication.start = Assembling app: {0}

# error("createApplication.appFailedDuplicateIds", appInfo.jarPath);
createApplication.appFailedDuplicateIds = Application cannot be deployed as it contains deployment-ids which are in use: app: {0}

# debug("createApplication.deploymentIdInUse", id);
createApplication.deploymentIdInUse = DeploymentId already used: {0}

# error("createApplication.invalidClass", e, exceptionInfo.exceptionClass, e.getMessage());
createApplication.invalidClass = Application class invalid: class={0}.  Exception: {1}

# info("createApplication.createdEjb", beanInfo.ejbDeploymentId, beanInfo.ejbName, beanInfo.containerId);
createApplication.createdEjb = Created Ejb(deployment-id={0}, ejb-name={1}, container={2})

# info("createApplication.startedEjb", beanInfo.ejbDeploymentId, beanInfo.ejbName, beanInfo.containerId);
createApplication.startedEjb = Started Ejb(deployment-id={0}, ejb-name={1}, container={2})

# info("createApplication.createdEjb.property", deployment.getEjbName(), entry.getKey(), entry.getValue());
createApplication.createdEjb.property = {0} property: {1} = {2}

# info("createApplication.createLocalClient", clientClassName, clientInfo.moduleId);
createApplication.createLocalClient = LocalClient(class={0}, module={1}) 

# info("createApplication.success", appInfo.jarPath);
createApplication.success = Deployed Application(path={0})

# info("createApplication.naming", appInfo.jarPath);
createApplication.naming = Naming context of deployed Application(path={0}) is set to read only

# debug("createApplication.undeployFailed", e1, appInfo.jarPath);
createApplication.undeployFailed = App failing deployment may not have undeployed cleanly: {0}

# format("createApplication.failed", appInfo.jarPath)
createApplication.failed = Creating application failed: {0}

# failing deployment may not have undeployed cleanly: "+appInfo.jarPath, e1);
# createExternalContext(JndiContextInfo)
# info("createService", contextInfo.service, contextInfo.id, contextInfo.className);
createService = Creating {0}(id={1})
createServiceWithAliases = Creating {0}(id={1}, aliases={2})

createService.props = {0}={1}

# createRecipe(ServiceInfo)
# info.className);
# createResource(ResourceInfo)
# debug("createResource.startingResourceAdapter", serviceInfo.id, service.getClass().getName());
createResource.startingResourceAdapter = Starting ResourceAdapter(id={0})

# info("createResource.createConnectionManager", serviceInfo.id, service.getClass().getName());
createResource.createConnectionManager = Creating ConnectionManager for Resource(id={0})

# destroyApplication(AppInfo)
# info("destroyApplication.start", appInfo.jarPath);
destroyApplication.start = Undeploying app: {0}

# debug("destroyApplication.success", appInfo.jarPath);
destroyApplication.success = Undeployed app: {0}

# format("destroyApplication.failed", appInfo.jarPath)
destroyApplication.failed = Failed undeploying application: id={0}

# fireAfterApplicationCreated(AppInfo)
# debug("appCreationEvent.start", listenerName, appInfo.jarPath);
appCreationEvent.start = App Created Event: {0}: {1}

# error("appCreationEvent.failed", e, listenerName, appInfo.jarPath);
appCreationEvent.failed = Error notifying deployment listener {0} of created application {1}

# fireBeforeApplicationDestroyed(AppInfo)
# debug("appDestroyedEvent.start", listenerName, appInfo.jarPath);
appDestroyedEvent.start = App Destroyed Event: {0}: {1}

# error("appDestroyedEvent.failed", e, listenerName, appInfo.jarPath);
appDestroyedEvent.failed = Error notifying deployment listener {0} of destroyed application {1}

# removeContainer(String)
# error("removeContainer.unbindFailed", containerId);
removeContainer.unbindFailed = Failed to unbind {0}

# warning("unusedProperty", property, info.id);
unusedProperty = Property "{0}" not supported by "{1}"

# LazyEjbReference
#format("lazyEjbRefNotResolved", info.getName(), info.getEjbLink(), info.getInterface(), info.getHome());
lazyEjbRefNotResolved.home = No EJB found for reference "{0}": ejb-link={1}, interface={2}, home={3}

##format("lazyEjbRefNotResolved", info.getName(), info.getEjbLink(), info.getInterface());
lazyEjbRefNotResolved = No EJB found for reference "{0}": ejb-link={1}, interface={2}

#format("deploymentNotFound", info.getName(), deploymentId);
deploymentNotFound = EJB reference "{0}" links to ejb deployment-id which does not exist "{1}" 